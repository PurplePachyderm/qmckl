#+TITLE: QMCkl / Verificarlo CI probes

QMCkl wrapper for optional Verificarlo CI probes support.

* About this file

Verificarlo's continuous integration system can be optionally integrated into
QMCkl. Verificarlo CI exports test variables by using a "probes" system, that
is to say a data structure that will store values and bind them to a key a
test/variable name combination. However, we want this support to remain strictly optional, and for this reason, all calls to ~vfc_probes~ should be
contained inside a ~#ifdef VFC_CI~ preprocesser directive. To make the process
of adding probes into QMCkl tests, this file defines a wrapper to ~vfc_probes~
which could then be used whether Verificarlo CI support is activated or not,
and export the test probe only in the former case.


* C sources

First of all, we should create a global ~vfc_probes~ instance only if
Verificarlo CI support is enabled:

#+begin_src c :comments link :tangle (eval c_test) :noweb yes
#include <stdbool.h>

#ifdef VFC_CI
#include <vfc_probes.h>
vfc_probes probes = vfc_init probes();
#endif
#+end_src


We then define the wrapper to ~vfc_probe~ (the basic function used to create a
probe), ~qmckl_probe~ which will put the probe "as normal" if the support is
enabled, or just make sure that the value matches what is expected otherwise:


#+begin_src c :comments link :tangle (eval c_test) :noweb yes
bool qmckl_probe(
    char * testName,
    char * varName,
    double value,
    double expectedValue
) {
#ifdef VFC_CI
    return vfc_probe(&probes, testName, varName, value);
#else
    return value == expectedValue;
#endif
}
#+end_src


* Fortran interface
